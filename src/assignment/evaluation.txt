Pros:

Typescript Implementation: Your use of Typescript demonstrates a good understanding of its benefits in enforcing type safety and reducing potential errors in code.

Use of Hooks: We were pleased to see your application of React hooks, which showcases your knowledge of current React features and practices.

Testing Approach: The incorporation of tests within your submission indicates a forward-thinking approach to software development, emphasizing quality and reliability.


Cons:

Multiple API Requests on Initial Load: Your application makes two API requests upon the initial load. This approach can impact performance and user experience. We recommend exploring ways to optimize this, potentially through combining requests or ensuring critical data is loaded with priority.

Lazy Loading Implementation: 
Although an attempt was made to implement lazy loading, it appears not to be functioning as intended. Proper utilization of lazy loading can significantly improve the performance by loading content only when needed.

Non-use of IntersectionObserver: 
The absence of the IntersectionObserver for managing visibility and loading of content can also affect the application's efficiency and user experience.

React Code Practices: We observed instances where idiomatic React code conventions were not followed, including the breaking of three specific React rules. Adhering to React's recommended practices is crucial for maintaining code quality and readability.

CSS Styling Approach: Placing all CSS styles in a single file can make the styling difficult to manage as the application grows. Consider modularizing your CSS by component or utilizing CSS-in-JS solutions for better scalability and maintainability.

Mediaquery to change on screen change?
LoaderComponent naming file
Api key hide?